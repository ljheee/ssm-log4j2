<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper
        PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
        "http://mybatis.org/dtd/mybatis-3-mapper.dtd">

<!-- Mapper.xml 必须要包含上面的DTD头部（DOCTYPE）  -->

<!-- namespace为命名空间，应该是mapper接口的全称-->
<mapper namespace="com.ljheee.app.dao.UserDAO">

    <insert id="addUser" parameterType="com.ljheee.app.entity.User">
        <selectKey keyProperty="id" order="AFTER" resultType="java.lang.Integer">
            SELECT last_insert_id()
        </selectKey>
        INSERT INTO USER (name, passwd, appid) value (#{name}, #{passwd}, #{appid})
        <!-- 使用mysql的uuid非自增的生成主键，先用selectKey的BEFORE生成主键，填充到user的id中，
            注意uuid生成的主键需要为String类型。
            在insert语句中需要填写id属性，此时id属性是uuid已经填充好的情况。

        <selectKey keyProperty="id" order="BEFORE" resultType="java.lang.String">
            SELECT uuid()
        </selectKey>
        INSERT INTO USER (id,username,birthday,sex,address) value (#{id},#{username},#{birthday},#{sex},#{address})
        -->
    </insert>

    <!-- 使用mysql的uuid非自增的生成主键，先用selectKey的BEFORE生成主键，填充到user的id中，
           注意uuid生成的主键需要为String类型。
           在insert语句中需要填写id属性，此时id属性是uuid已经填充好的情况。

       <selectKey keyProperty="id" order="BEFORE" resultType="java.lang.String">
           SELECT uuid()
       </selectKey>
       INSERT INTO USER (id,username,birthday,sex,address) value (#{id},#{username},#{birthday},#{sex},#{address})
       -->




    <resultMap id="userResultMap" type="com.ljheee.app.entity.User">
        <id column="id" property="id"/>
        <result column="name" property="name"/>
        <result column="passwd" property="passwd"/>
        <result column="appid" property="appid"/>
    </resultMap>

    <select id="getUserList" resultMap="userResultMap">
        SELECT * FROM test.user
    </select>

    <select id="getUserCount" resultType="java.lang.Integer">
        SELECT count(*) FROM USER
    </select>


    <delete id="deleteById" parameterType="java.lang.Integer">
        DELETE  FROM user WHERE id = #{id}
    </delete>


</mapper>
